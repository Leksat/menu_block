<?php
// $Id$

/**
 * @file
 * Provides configurable blocks of menu items.
 */

/**
 * Implements hook_menu().
 */
function menu_block_menu() {
  $items['admin/build/block/add-menu-block'] = array(
    'title' => 'Add menu block',
    'description' => 'Add a new menu block.',
    'access arguments' => array('administer blocks'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_block_add_block_form'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'menu_block.admin.inc',
  );
  $items['admin/build/block/delete-menu-block'] = array(
    'title' => 'Delete menu block',
    'access arguments' => array('administer blocks'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_block_delete'),
    'type' => MENU_CALLBACK,
    'file' => 'menu_block.admin.inc',
  );
  $items['admin/settings/menu_block'] = array(
    'title' => 'Menu block',
    'description' => 'Add a new menu block.',
    'access arguments' => array('administer blocks'),
    'page callback' => '_menu_block_by_module_hack',
    'file' => 'menu_block.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function menu_block_init() {
  drupal_add_css(drupal_get_path('module', 'menu_block') . '/menu_block.css');
}

/**
 * Implements hook_help().
 */
function menu_block_help($path, $arg) {
  switch ($path) {
    case 'admin/help#menu_block':
    case 'admin/build/block/add-menu-block':
      include_once './' . drupal_get_path('module', 'menu_block') . '/menu_block.pages.inc';
      return _menu_block_help($path, $arg);
  }
}

/**
 * Alters the block admin form to add delete links next to menu blocks.
 */
function menu_block_form_block_admin_display_form_alter(&$form, $form_state) {
  include_once './' . drupal_get_path('module', 'menu_block') . '/menu_block.admin.inc';
  _menu_block_form_block_admin_display_form_alter($form, $form_state);
}

/**
 * Implements hook_block().
 */
function menu_block_block($op = 'list', $delta = NULL, $edit = NULL) {
  $function = '_menu_block_block_' . $op;
  if (function_exists($function)) {
    return $function($delta, $edit);
  }
  else {
    // "op"s besides "view" are seldom used, so we store them in a separate file.
    include_once './' . drupal_get_path('module', 'menu_block') . '/menu_block.admin.inc';
    if (function_exists($function)) {
      return $function($delta, $edit);
    }
  }
}

/**
 * Returns the 'view' $op info for hook_block().
 *
 * @param $delta
 *   string The name of the block to render.
 */
function _menu_block_block_view($delta) {
  $data = array();

  // Get the block configuration options.
  $menu_name = variable_get("menu_block_{$delta}_menu_name", "navigation");
  $level = variable_get("menu_block_{$delta}_level", 1);
  $depth = variable_get("menu_block_{$delta}_depth", 0);
  $expanded = variable_get("menu_block_{$delta}_expanded", 0);

  // Get the default block name
  $menu_names = menu_get_menus(TRUE);
  $data['subject'] = $menu_names[$menu_name];

  if ($expanded) {
    // Get the full, un-pruned tree.
    $tree = menu_tree_all_data($menu_name);
  }
  else {
    // Get the tree pruned for just the active path.
    $tree = menu_tree_page_data($menu_name);
  }

  // Optionally prune the tree
  if ($level > 1 || $depth > 0) {
    list($data['subject'], $tree) = menu_tree_prune_tree($tree, $level); // Still need to implement depth.
  }

  // Render the list or the tree.
  if ($depth == 1) {
    $data['content'] = menu_block_list_output($tree, $menu_name);
  }
  else {
    $data['content'] = menu_tree_output($tree, $menu_name);
  }

  return $data;
}

/**
 * Implements hook_theme().
 */
function menu_block_theme() {
  return array(
    'menu_block_tree' => array(
      'arguments' => array('tree' => NULL, 'menu_name' => NULL, 'pid' => NULL),
    ),
    'menu_block_list' => array(
      'arguments' => array('list' => NULL, 'menu_name' => NULL, 'pid' => NULL),
    ),
  );
}

/**
 * Generate the HTML for a menu tree.
 *
 * @ingroup themeable
 *
 * @param $tree
 *   string The menu tree.
 * @param $menu_name
 *   The name of the menu from which the tree is being rendered.
 * @param $pid
 *   int The parent id of the menu.
 * @return
 *   string The rendered menu tree.
 */
function theme_menu_block_tree($tree, $menu_name = NULL, $pid = NULL) {
  $menu_classes = array('menu', 'menu-tree');
  if ($menu_name) {
    $menu_classes[] = 'menu-name-' . $menu_name;
  }
  if ($pid) {
    $menu_classes[] = 'menu-pid-' . $pid;
  }
  return '<ul class="' . implode(' ', $menu_classes) . '">' . $tree . '</ul>';
}

/**
 * Generate the HTML for a menu list.
 *
 * @ingroup themeable
 *
 * @param $tree
 *   string The menu tree.
 * @param $menu_name
 *   The name of the menu from which the tree is being rendered.
 * @param $pid
 *   int The parent id of the menu.
 * @return
 *   string The rendered menu list.
 */
function theme_menu_block_list($list, $menu_name = NULL, $pid = NULL) {
  $menu_classes = array('menu-list');
  if ($menu_name) {
    $menu_classes[] = 'menu-name-' . $menu_name;
  }
  if ($pid) {
    $menu_classes[] = 'menu-pid-' . $pid;
  }
  return '<ul class="' . implode(' ', $menu_classes) . '">' . $list . '</ul>';
}

/**
 * Returns a rendered menu tree.
 *
 * This is a near-copy of menu_tree_output; it uses theme_menu_block_list()
 * instead of theme_menu_tree().
 *
 * @param $tree
 *   A data structure representing the tree as returned from menu_tree_data.
 * @return
 *   The rendered HTML of that data structure.
 */
function menu_block_list_output($tree) {
  $output = '';
  $items = array();

  // Pull out just the menu items we are going to render so that we
  // get an accurate count for the first/last classes.
  foreach ($tree as $data) {
    if (!$data['link']['hidden']) {
      $items[] = $data;
    }
  }

  $num_items = count($items);
  foreach ($items as $i => $data) {
    $extra_class = NULL;
    if ($i == 0) {
      $extra_class = 'first';
    }
    if ($i == $num_items - 1) {
      $extra_class = 'last';
    }
    $link = theme('menu_item_link', $data['link']);
    if ($data['below']) {
      $output .= theme('menu_item', $link, $data['link']['has_children'], menu_block_list_output($data['below']), $data['link']['in_active_trail'], $extra_class);
    }
    else {
      $output .= theme('menu_item', $link, $data['link']['has_children'], '', $data['link']['in_active_trail'], $extra_class);
    }
  }
  return $output ? theme('menu_block_list', $output) : '';
}

/**
 * Prune a tree.
 */
function menu_tree_prune_tree($tree, $level = 1) {
  $menu_title = '';

  // Trim down to the level specified.
  for ($i=$level; $i > 1; $i--) {
    $tree_pruned = FALSE;
    foreach ($tree AS $curr) {
      if ($curr['link']['in_active_trail']) {
        $menu_title = $curr['link']['options']['attributes']['title'];
        $tree = $curr['below'] ? $curr['below'] : array();
        $tree_pruned = TRUE;
        break;
      }
    }
    if (!$tree_pruned) {
      $tree = array();
      break;
    }
  }

  return array($menu_title, $tree);
}
